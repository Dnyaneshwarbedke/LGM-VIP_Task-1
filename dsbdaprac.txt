1...
import matplotlib.pyplot as plt
names = ['a','b','c','d','e','f','g']
values =[1,10,30,50,25,89,300]

plt.bar(names,values)
plt.show()
plt.plot(values,names)
plt.show()
plt.pie(values)
plt.show()

2....
#SORT,Transpose and shape
import pandas as pd
data={"Name":["Mauli","Raju","Mahi"],"Age":[20,19,24]}
df1=pd.DataFrame(data)
print(df1)
print("\n")
df1.sort_values(["Age"],ascending=[True],inplace=True)
print(df1)
print("\n")
print(df1.T)
print("\n")
print(df1.shape)


3.....
#Seaborn
from seaborn import palettes
import seaborn as sns
import seaborn
import matplotlib.pyplot as plt
data =sns.load_dataset('iris')
sns.lineplot(x='sepal_length',y='sepal_width',data=data)
plt.show()
print("\n")
df=sns.load_dataset('titanic')
sns.barplot(x= 'who', y='fare', data=df)
plt.show()
print("\n")

seaborn.set(style='whitegrid')
fmri=seaborn.load_dataset("fmri")
seaborn.scatterplot(x="timepoint",y="signal" ,data=fmri)



4.....
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

#load the data
from google.colab import files
upload = files.upload()

#Load the data
df =pd.read_csv('stock_data.csv')
print(df.head(6))
print(df.shape)

#visualize data
plt.figure(figsize=(16,8))
plt.title('Netflix')
plt.xlabel('Days')
plt.ylabel('Close Price USD($)')
plt.plot(df['Close'])
plt.show()

#get the close price
df = df[['Close']]
print(df.head(4))

#Creat a variable to predict 'x' days out into the future
future_days = 50

#Creat a new column shifted 'x' units/days up
df['Prediction'] = df[['Close']].shift(-future_days)
print(df.head(4))
print(df.tail(4))

#Creat future data set (x) and convert it to a numpy array and remove the last x rows/days
x = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(x)

#Creat the target data set
y = np.array(df['Prediction'])[:-future_days]
print(y)

#split data into 75% training and 25% data testing
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25)

#Creat decission tree regressor model
tree = DecisionTreeRegressor().fit(x_train, y_train)

#Creat the linear regression model
lr = LinearRegression().fit(x_train, y_train)

#Get the last 'x' row of the future data set
x_future = df.drop(['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
print(x_future)

#show the model tree prediction
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print ()

#show the model linear regression prediction
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#visualize data
Predictions = tree_prediction
valid = df[x.shape[0]:]
valid['Prediction'] = Predictions
plt.figure(figsize=(16,8))
plt.title('Model_tree')
plt.xlabel('Days')
plt.ylabel('Close Price USD($)')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Prediction']])
plt.legend(['Orig','Val','Pred'])
plt.show()

#visualize data
Predictions = lr_prediction
valid = df[x.shape[0]:]
valid['Prediction'] = Predictions
plt.figure(figsize=(16,8))
plt.title('Model_lr')
plt.xlabel('Days')
plt.ylabel('Close Price USD($)')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Prediction']])
plt.legend(['Orig','Val','Pred'])
plt.show()


....5
#Scrapper

from bs4 import BeautifulSoup 
import requests 
import csv
import pandas as pd

url="https://www.flipkart.com/search?q=laptop&sid=6bo%2Cb5g&as=on&as-show=on&otracker=AS_QueryStore_OrganicAutoSuggest_1_6_na_na_na&otracker1=AS_QueryStore_OrganicAutoSuggest_1_6_na_na_na&as-pos=1&as-type=RECENT&suggestionId=laptop%7CLaptops&requestId=7ec220e8-4f02-4150-9e0b-9e90cf692f4b&as-searchtext=laptop"
response = requests.get(url)
htmlcontent = response.content
soup = BeautifulSoup(htmlcontent,"html.parser")
print(soup.prettify)

products=[]
prices=[]
ratings=[]
product=soup.find('div',attrs={'class':'_4rR01T'})
print(product.text)

for a in soup.findAll('a',href=True, attrs={'class':'_1fQZEK'}):
  name=a.find('div',attrs={'class':'_4rR01T'})
  price=a.find('div',attrs={'class':'_30jeq3 _1_WHN1'})
  rating=a.find('div',attrs={'class':'_3LWZlK'})
  products.append(name.text)
  prices.append(price.text)
  ratings.append(rating.text)
  
 df = pd.DataFrame({'Product Name':products,'Prices':prices,'Ratings':ratings})
 df.head()
 
 df.to_csv('products.csv')


......6
Create Histogram

.....7
from textblob import TextBlob
sentence = ''' The Food at Radison was awesome '''
sentence1 = ''' The Food at Radison was very good '''

analysis = TextBlob(sentence).sentiment
print(analysis,"\n")
analysis = TextBlob(sentence1).sentiment
print(analysis)

from textblob import TextBlob

sentence = '''The Food at Radison was awesome'''

analysisPol = TextBlob(sentence).polarity
analysisSub = TextBlob(sentence).subjectivity

print(analysisPol)
print(analysisSub)
